// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	payment "JobHuntz/features/payment"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	verification "JobHuntz/features/verification"
)

// paymentData is an autogenerated mock type for the PaymentService type
type paymentData struct {
	mock.Mock
}

// CallbackMid provides a mock function with given fields: dbRaw, input
func (_m *paymentData) CallbackMid(dbRaw *sql.DB, input payment.PaymentCore) error {
	ret := _m.Called(dbRaw, input)

	if len(ret) == 0 {
		panic("no return value specified for CallbackMid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.DB, payment.PaymentCore) error); ok {
		r0 = rf(dbRaw, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderCompanyDetail provides a mock function with given fields: dbRaw, userID
func (_m *paymentData) GetOrderCompanyDetail(dbRaw *sql.DB, userID uint) (verification.OrderCompanyCore, error) {
	ret := _m.Called(dbRaw, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderCompanyDetail")
	}

	var r0 verification.OrderCompanyCore
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) (verification.OrderCompanyCore, error)); ok {
		return rf(dbRaw, userID)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) verification.OrderCompanyCore); ok {
		r0 = rf(dbRaw, userID)
	} else {
		r0 = ret.Get(0).(verification.OrderCompanyCore)
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, uint) error); ok {
		r1 = rf(dbRaw, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderJobseekerDetail provides a mock function with given fields: dbRaw, userID
func (_m *paymentData) GetOrderJobseekerDetail(dbRaw *sql.DB, userID uint) (verification.OrderJobseekerCore, error) {
	ret := _m.Called(dbRaw, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderJobseekerDetail")
	}

	var r0 verification.OrderJobseekerCore
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) (verification.OrderJobseekerCore, error)); ok {
		return rf(dbRaw, userID)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) verification.OrderJobseekerCore); ok {
		r0 = rf(dbRaw, userID)
	} else {
		r0 = ret.Get(0).(verification.OrderJobseekerCore)
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, uint) error); ok {
		r1 = rf(dbRaw, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Payment provides a mock function with given fields: request
func (_m *paymentData) Payment(request payment.PaymentCore) (payment.PaymentCore, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Payment")
	}

	var r0 payment.PaymentCore
	var r1 error
	if rf, ok := ret.Get(0).(func(payment.PaymentCore) (payment.PaymentCore, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(payment.PaymentCore) payment.PaymentCore); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(payment.PaymentCore)
	}

	if rf, ok := ret.Get(1).(func(payment.PaymentCore) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: request
func (_m *paymentData) UpdatePayment(request payment.PaymentCore) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(payment.PaymentCore) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: dbRaw, pay
func (_m *paymentData) UpdateStatus(dbRaw *sql.DB, pay payment.PaymentCore) error {
	ret := _m.Called(dbRaw, pay)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.DB, payment.PaymentCore) error); ok {
		r0 = rf(dbRaw, pay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newPaymentData creates a new instance of paymentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPaymentData(t interface {
	mock.TestingT
	Cleanup(func())
}) *paymentData {
	mock := &paymentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
