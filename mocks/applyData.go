// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	application "JobHuntz/features/application"
	favorit "JobHuntz/features/favorit"

	jobseeker "JobHuntz/features/jobseeker"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// applyData is an autogenerated mock type for the ApplyDataInterface type
type applyData struct {
	mock.Mock
}

// CountApplication provides a mock function with given fields: dbRaw, userID
func (_m *applyData) CountApplication(dbRaw *sql.DB, userID uint) (uint, error) {
	ret := _m.Called(dbRaw, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountApplication")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) (uint, error)); ok {
		return rf(dbRaw, userID)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) uint); ok {
		r0 = rf(dbRaw, userID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, uint) error); ok {
		r1 = rf(dbRaw, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: input
func (_m *applyData) CreateApplication(input application.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: id, input
func (_m *applyData) Edit(id uint, input application.Core) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, application.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllApplications provides a mock function with given fields: JobseekerID
func (_m *applyData) GetAllApplications(JobseekerID uint) ([]application.Core, error) {
	ret := _m.Called(JobseekerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllApplications")
	}

	var r0 []application.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]application.Core, error)); ok {
		return rf(JobseekerID)
	}
	if rf, ok := ret.Get(0).(func(uint) []application.Core); ok {
		r0 = rf(JobseekerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(JobseekerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllApplicationsCompany provides a mock function with given fields: VacancyID
func (_m *applyData) GetAllApplicationsCompany(VacancyID uint) ([]application.Core, error) {
	ret := _m.Called(VacancyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllApplicationsCompany")
	}

	var r0 []application.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]application.Core, error)); ok {
		return rf(VacancyID)
	}
	if rf, ok := ret.Get(0).(func(uint) []application.Core); ok {
		r0 = rf(VacancyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(VacancyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataCompany provides a mock function with given fields: dbRaw, vacancyID
func (_m *applyData) GetDataCompany(dbRaw *sql.DB, vacancyID uint) (favorit.DataCompanyCore, error) {
	ret := _m.Called(dbRaw, vacancyID)

	if len(ret) == 0 {
		panic("no return value specified for GetDataCompany")
	}

	var r0 favorit.DataCompanyCore
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) (favorit.DataCompanyCore, error)); ok {
		return rf(dbRaw, vacancyID)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, uint) favorit.DataCompanyCore); ok {
		r0 = rf(dbRaw, vacancyID)
	} else {
		r0 = ret.Get(0).(favorit.DataCompanyCore)
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, uint) error); ok {
		r1 = rf(dbRaw, vacancyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyData provides a mock function with given fields: userID
func (_m *applyData) GetMyData(userID uint) (jobseeker.JobseekerCore, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMyData")
	}

	var r0 jobseeker.JobseekerCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (jobseeker.JobseekerCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) jobseeker.JobseekerCore); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(jobseeker.JobseekerCore)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newApplyData creates a new instance of applyData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newApplyData(t interface {
	mock.TestingT
	Cleanup(func())
}) *applyData {
	mock := &applyData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
