// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	company "JobHuntz/features/company"
	jobseeker "JobHuntz/features/jobseeker"

	mock "github.com/stretchr/testify/mock"

	verification "JobHuntz/features/verification"
)

// verificationData is an autogenerated mock type for the VerificationServiceInterface type
type verificationData struct {
	mock.Mock
}

// AddOrderCompany provides a mock function with given fields: input
func (_m *verificationData) AddOrderCompany(input verification.OrderCompanyCore) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(verification.OrderCompanyCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOrderJobseeker provides a mock function with given fields: input
func (_m *verificationData) AddOrderJobseeker(input verification.OrderJobseekerCore) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderJobseeker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(verification.OrderJobseekerCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDataCompany provides a mock function with given fields: userID
func (_m *verificationData) GetDataCompany(userID uint) (company.CompanyCore, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDataCompany")
	}

	var r0 company.CompanyCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (company.CompanyCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) company.CompanyCore); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(company.CompanyCore)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataJobseeker provides a mock function with given fields: userID
func (_m *verificationData) GetDataJobseeker(userID uint) (jobseeker.JobseekerCore, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDataJobseeker")
	}

	var r0 jobseeker.JobseekerCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (jobseeker.JobseekerCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) jobseeker.JobseekerCore); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(jobseeker.JobseekerCore)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newVerificationData creates a new instance of verificationData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newVerificationData(t interface {
	mock.TestingT
	Cleanup(func())
}) *verificationData {
	mock := &verificationData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
