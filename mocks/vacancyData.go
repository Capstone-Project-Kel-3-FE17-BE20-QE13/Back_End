// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	vacancy "JobHuntz/features/vacancy"

	mock "github.com/stretchr/testify/mock"
)

// VacancyData is an autogenerated mock type for the JobDataInterface type
type VacancyData struct {
	mock.Mock
}

// CountJobsByUserID provides a mock function with given fields: userID
func (_m *VacancyData) CountJobsByUserID(userID uint) (int, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CountJobsByUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (int, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: input
func (_m *VacancyData) CreateJob(input vacancy.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(vacancy.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobById provides a mock function with given fields: input, ID
func (_m *VacancyData) DeleteJobById(input []vacancy.Core, ID int) error {
	ret := _m.Called(input, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]vacancy.Core, int) error); ok {
		r0 = rf(input, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllJobs provides a mock function with given fields:
func (_m *VacancyData) GetAllJobs() ([]vacancy.Core, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllJobs")
	}

	var r0 []vacancy.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]vacancy.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []vacancy.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vacancy.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *VacancyData) GetById(id uint) (*vacancy.CompanyCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *vacancy.CompanyCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*vacancy.CompanyCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *vacancy.CompanyCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vacancy.CompanyCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobById provides a mock function with given fields: jobID
func (_m *VacancyData) GetJobById(jobID int) (vacancy.Core, error) {
	ret := _m.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobById")
	}

	var r0 vacancy.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (vacancy.Core, error)); ok {
		return rf(jobID)
	}
	if rf, ok := ret.Get(0).(func(int) vacancy.Core); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Get(0).(vacancy.Core)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyCompanyVacancies provides a mock function with given fields: companyID
func (_m *VacancyData) MyCompanyVacancies(companyID uint) ([]vacancy.Core, error) {
	ret := _m.Called(companyID)

	if len(ret) == 0 {
		panic("no return value specified for MyCompanyVacancies")
	}

	var r0 []vacancy.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]vacancy.Core, error)); ok {
		return rf(companyID)
	}
	if rf, ok := ret.Get(0).(func(uint) []vacancy.Core); ok {
		r0 = rf(companyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vacancy.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(companyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: input, vacancyID
func (_m *VacancyData) UpdateStatus(input vacancy.JobStatusCore, vacancyID uint) error {
	ret := _m.Called(input, vacancyID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(vacancy.JobStatusCore, uint) error); ok {
		r0 = rf(input, vacancyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVacancyData creates a new instance of VacancyData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVacancyData(t interface {
	mock.TestingT
	Cleanup(func())
}) *VacancyData {
	mock := &VacancyData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
