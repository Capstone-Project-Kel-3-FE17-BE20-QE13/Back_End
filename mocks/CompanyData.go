// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	company "JobHuntz/features/company"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// CompanyData is an autogenerated mock type for the CompanyDataInterface type
type CompanyData struct {
	mock.Mock
}

// GetById provides a mock function with given fields: id
func (_m *CompanyData) GetById(id uint) (*company.CompanyCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *company.CompanyCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*company.CompanyCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *company.CompanyCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*company.CompanyCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginCompany provides a mock function with given fields: email, password
func (_m *CompanyData) LoginCompany(email string, password string) (*company.CompanyCore, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginCompany")
	}

	var r0 *company.CompanyCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*company.CompanyCore, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *company.CompanyCore); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*company.CompanyCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCompany provides a mock function with given fields: input
func (_m *CompanyData) RegisterCompany(input company.CompanyCore) (*company.CompanyCore, string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCompany")
	}

	var r0 *company.CompanyCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(company.CompanyCore) (*company.CompanyCore, string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(company.CompanyCore) *company.CompanyCore); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*company.CompanyCore)
		}
	}

	if rf, ok := ret.Get(1).(func(company.CompanyCore) string); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(company.CompanyCore) error); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCompany provides a mock function with given fields: id, input, file, nameFile
func (_m *CompanyData) UpdateCompany(id int, input company.CompanyCore, file multipart.File, nameFile string) error {
	ret := _m.Called(id, input, file, nameFile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, company.CompanyCore, multipart.File, string) error); ok {
		r0 = rf(id, input, file, nameFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func NewCompanyData(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompanyData {
	mock := &CompanyData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
